{"metadata":"{\"compiler\":{\"version\":\"0.4.18\"},\"sources\":{\"contracts/LimitRanger.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.9;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport 'contracts/interfaces/uniswap/INonfungiblePositionManager.sol';\\nimport 'contracts/interfaces/uniswap/IUniswapV3Pool.sol';\\nimport 'contracts/interfaces/uniswap/IUniswapV3Factory.sol';\\nimport 'contracts/interfaces/uniswap/IWETH9.sol';\\n\\nimport './UniswapTransferHelper.sol';\\n\\n/// @title A contract which allows automated range orders for Uniswap by opening a liquidity position \\n///        and allowing anyone to close the position once the selling price is reached and returning the assets\\n///        to the original owner - minus a protocol fee (this is usually done by a bot). \\ncontract LimitRanger {\\n\\n    /// Uniswap smart contracts\\n    INonfungiblePositionManager public immutable nonfungiblePositionManager;\\n    IUniswapV3Factory public immutable uniswapV3Factory;\\n\\n    /// Smart contract of eth wrapper token\\n    IWETH9 public immutable weth9;\\n\\n    /// Uniswap liquidity position NFT smart contract\\n    IERC721 public immutable uniNft;\\n\\n    /// @dev Address of the protocol operator who has administrative rights\\n    address public protocolOperator;\\n\\n    /// @dev Address where protocol fees are sent to\\n    address payable public protocolFeeReceiver;\\n    \\n    /// current fee in per thousand\\n    uint16 public currentMinFee;\\n\\n    /// current stop position reward in percentage of fee (payed to the address which triggers a successful close position)\\n    uint8 public currentStopPositionReward;\\n\\n    /// switch to disable opening of new positions\\n    bool public depositsActive;\\n\\n    /// @dev Uniswap maximum tick value of a liquidity pool\\n    int24 constant MAX_TICK = (2**24/2)-1;\\n\\n    /// Event for the opening of a new position\\n    /// @param token The ID of the uniswap NFT which got created opening the position\\n    /// @param owner The address which opened the position\\n    event AddPosition(uint256 token, address indexed owner, uint128 liquidity, bool sellAbove);\\n\\n    /// Event for when a user takes ownership of his liquidity position which got created opening a position\\n    /// @param token The ID of the uniswap NFT the user takes ownership off \\n    /// @param owner The address which opened the position\\n    event RemovePosition(uint256 token, address indexed owner);\\n\\n    /// Event for when a position gets closed because the sell price was reached. Closing transfers the tokens in the liquidity position \\n    /// to the initial owner minus the fees which get transferred to the protocolFeeReceiver address\\n    /// @param token The ID of the uniswap NFT which got closed\\n    /// @param owner The address which opened the position\\n    event ClosePosition(uint256 token, address indexed owner);\\n\\n    /// Event for when a user cancels one of his positions which removes all liquidity from the liquidity position and transfers\\n    /// all tokens back to him, without applying any fees\\n    /// @param token The ID of the uniswap NFT representing the position which gets cancelled\\n    /// @param owner The address which opened the position\\n    event CancelPosition(uint256 token, address indexed owner);\\n\\n    /// Event for when a new minimum protocol fee is set.\\n    /// @param newFee The new fee amount in per thousand.\\n    event MinimumFeeSet(uint16 newFee);\\n\\n    /// Event for when a new address for the fee receiver is set.\\n    /// @param newFeeReceiver The address which receives all protocol fees.\\n    event FeeReceiverSet(address newFeeReceiver);\\n\\n    /// Event for when a new address for the protocol operator is set.\\n    /// @param newOperator The address of the new protocol operator.\\n    event OperatorSet(address newOperator);\\n\\n    /// Event for when deposits are activated/disabled.\\n    /// @param active If true deposits are active, if false deposits are disabled.\\n    event DepositsActiveSet(bool active);\\n\\n    /// Event for when a new reward percentage is set for closing positions.\\n    /// @param reward The new reward as percentage of fees collected.\\n    event StopPositionRewardSet(uint8 reward);\\n\\n    /// @dev Information about a position\\n    /// @param owner The address which opened the position\\n    /// @param sellTarget The tick at which the position can be closed\\n    /// @param fee The fee in per thounsand which gets deducted when the position is closed\\n    /// @param sellAboveTarget true if the tick of the liquidity pool needs to be at or above the sellTarget.\\n    ///                        false if it needs to be at or below\\n    /// @param unwrapToNative if true wrapped ether will be unwrapped before being sent to the owner when the position is closed\\n    struct PositionInfo {\\n        address owner;\\n        int24 sellTarget;\\n        uint16 fee;\\n        bool sellAboveTarget;\\n        bool unwrapToNative;\\n    }\\n\\n    /// @dev Mint params for a LimitRanger position.\\n    struct MintParams {\\n        address token0; \\n        address token1;\\n        uint256 token0Amount;\\n        uint256 token1Amount;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint24 poolFee;\\n        uint256 deadline;\\n        uint16 protocolFee;\\n        bool unwrapToNative;\\n    }\\n\\n    /// @dev positionInfos[tokenId] => PositionInfo - Lookup of position infos by uniswap tokenId\\n    mapping(uint256 => PositionInfo) public positionInfos;\\n\\n    /// @dev ownedTokens[ownerAddress] => tokenIds[] - Lookup of owned positions (uniswap tokenIds) by owner address.\\n    ///      Owned token Ids are stored in an array.\\n    mapping(address => uint256[]) internal ownedTokens;\\n\\n    /// @dev ownedTokensIndex[tokenId] => index - Lookup of the index of a position in the ownedTokens array.\\n    mapping(uint256 => uint256) internal ownedTokensIndex;\\n\\n    /// Create instance of contract\\n    /// @param _nonfungiblePositionManager Corresponding Uniswap contract\\n    /// @param _uniswapV3Factory Corresponding Uniswap contract\\n    /// @param _weth9 Eth ERC20 wrapper token contract\\n    constructor(\\n        INonfungiblePositionManager _nonfungiblePositionManager,\\n        IUniswapV3Factory _uniswapV3Factory,\\n        IWETH9 _weth9\\n    ) {\\n        nonfungiblePositionManager = _nonfungiblePositionManager;\\n        uniswapV3Factory = _uniswapV3Factory;\\n        uniNft = _nonfungiblePositionManager;\\n        weth9 = _weth9;\\n        protocolOperator = msg.sender;\\n        protocolFeeReceiver = payable(msg.sender);\\n        currentMinFee = 1;\\n        currentStopPositionReward = 0;\\n        depositsActive = true;\\n    }\\n\\n    /*****************************************/\\n    /*************** MODIFIERS ***************/\\n    /*****************************************/\\n    /// Modifier to check deadline of a transaction.\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, 'Transaction too old');\\n        _;\\n    }\\n\\n    /// Modifier which checks if the operation is performed by the owner of the given token.\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(positionInfos[tokenId].owner == msg.sender, 'Operation only allowed for owner of position');\\n        _;\\n    }\\n\\n    /// Modifier which checks if the operation is performed by the protocol operator.\\n    modifier onlyOperator() {\\n        require(msg.sender == protocolOperator, 'Operaton only allowed for operator of contract');\\n        _;\\n    }\\n\\n    /// Modifier which checks if new deposits are currently allowed\\n    modifier onlyDepositsActive() {\\n        require(depositsActive, 'Deposits are currently disabled');\\n        _;\\n    }\\n\\n    /*****************************************/\\n    /******** PROTOCOL ADMINISTRATION ********/\\n    /*****************************************/\\n\\n    /// Sets the address to which protocol fees are sent\\n    /// @param receiver The new protocol fee receiver address.\\n    function setProtocolFeeReceiver(address receiver) external onlyOperator {        \\n        require(address(0) != receiver, '0x0 address not allowed');\\n        protocolFeeReceiver = payable(receiver);\\n        emit FeeReceiverSet(receiver);\\n    }\\n\\n    /// Sets the address of the new protocol operator\\n    /// @param newOperator The new protocol operator address.\\n    function setProtocolOperator(address newOperator) external onlyOperator {        \\n        require(address(0) != newOperator, '0x0 address not allowed');\\n        protocolOperator = newOperator;\\n        emit OperatorSet(newOperator);\\n    }\\n\\n    /// Sets the minimumb protocol fee for new positions in per thousand.\\n    /// @param fee The new minimum fee.\\n    function setMinimumFee(uint16 fee) external onlyOperator {\\n        currentMinFee = fee;\\n        emit MinimumFeeSet(fee);\\n    }\\n\\n    /// Toggles if new deposits are allowed or not.\\n    /// @param active If true new deposits are allowed. Otherwise no new deposits can be made.\\n    function setDepositsActive(bool active) external onlyOperator {\\n        depositsActive = active;\\n        emit DepositsActiveSet(active);\\n    }\\n\\n    /// Sets new reward percentage for successfully closing positions. \\n    /// @param reward The new reward as percentage of fees collected.\\n    function setStopPositionReward(uint8 reward) external onlyOperator {\\n        require(reward <= 100, 'reward >100 not allowed');\\n        currentStopPositionReward = reward;\\n        emit StopPositionRewardSet(reward);\\n    }\\n\\n\\n    /*****************************************/\\n    /********** PUBLIC FUNCTIONS *************/\\n    /*****************************************/\\n\\n    /// Returns the address of the owner of a given token.\\n    /// @param tokenId The tokenId of the position to retrieve the owner address of.\\n    /// @return Address of the owner of the given position.\\n    function getOwner(uint256 tokenId) external view returns (address) {\\n        return(positionInfos[tokenId].owner);\\n    }\\n\\n    /// Returns all owned tokenIds for the given address\\n    /// @param owner The address for which the owned positions should be returned.\\n    /// @return Token IDs of the positions owned by the given address.\\n    function getOwnedPositions(address owner) external view returns (uint256[] memory) {\\n        return ownedTokens[owner];\\n    }\\n\\n    /// Retrieve position information for the given token ID.\\n    /// @param tokenId The token ID identifying the position to be returned.\\n    /// @return Position information for the position identified by the given token ID.\\n    function getPositionInfo(uint256 tokenId) external view returns (PositionInfo memory) {\\n        return positionInfos[tokenId];\\n    }\\n\\n    /// Cancels a position, removing all liquidity and fees from the Uniswap liquidity position and returning the assets \\n    /// to the owner without charging a protocol fee.\\n    /// Can only be triggered by the owner of the position.\\n    /// @param tokenId Token ID identifying the position to be cancelled.\\n    /// @return success True if the position was successfully canceled. False otherwise.\\n    function cancelPosition(uint256 tokenId) external onlyOwner(tokenId) returns (bool success) {\\n        bool result = _payOutPosition(tokenId, false);\\n        if(result) {\\n            emit CancelPosition(tokenId, msg.sender);\\n        }\\n        return result;\\n    }\\n\\n    /// Stops a position, removing all liquidity and fees from the Uniswap liquidity position and returning the assets \\n    /// to the owner minus the set fee which is sent to the protocol fee receiver address.\\n    /// Can only be triggered when the tick value requirement of the position is met.\\n    /// @param tokenId Token ID identifying the position to be stopped.\\n    /// @return success True if the position was successfully stopped. False otherwise.\\n    function stopPosition(uint256 tokenId) external returns (bool success){\\n        address owner = positionInfos[tokenId].owner;\\n        bool result = _payOutPosition(tokenId, true);\\n        if(result) {\\n            emit ClosePosition(tokenId, owner);\\n        }\\n        return result;\\n    }\\n\\n\\n    /// Transfers the NFT identifying the Uniswap liqudity position to the owner of the position.\\n    /// Can only be called by the owner.\\n    /// @param tokenId The id of the position to be returned to the owner\\n    function retrieveNFT(uint256 tokenId) external onlyOwner(tokenId) {        \\n        _removePosition(tokenId, msg.sender);\\n        emit RemovePosition(tokenId, msg.sender); \\n    }\\n\\n    /// Opens a new position.\\n    /// @param params Mint new position parameters\\n    /// @return tokenId The token ID identifying this position and the corresponding Uniswap liquidity position.\\n    function mintNewPosition(MintParams calldata params)\\n        external\\n        payable \\n        onlyDepositsActive\\n        checkDeadline(params.deadline)\\n        returns (           \\n            uint256 tokenId      \\n        )\\n    {       \\n        require(params.token0Amount == 0 || params.token1Amount == 0, 'Token amount of token0 or token1 must be 0');\\n        require(params.token0Amount > 0 || params.token1Amount > 0, 'Invalid token amount');\\n        require(params.protocolFee >= currentMinFee && params.protocolFee <= 500, 'Invalid protocol fee');\\n\\n        uint256 ethAmount = 0;\\n        // if msg value is greater than 0, check if sent ether matches weth token amount value \\n        if(msg.value > 0) {\\n            if(params.token0 == address(weth9)) {            \\n                ethAmount = params.token0Amount;\\n            } else if (params.token1 == address(weth9)) {\\n                ethAmount = params.token1Amount;\\n            } else {\\n                revert('Message value not 0');\\n            }\\n            require(ethAmount == msg.value, 'Invalid message value');\\n        }\\n        \\n        {\\n            IUniswapV3Pool pool = IUniswapV3Pool(uniswapV3Factory.getPool(params.token0, params.token1, params.poolFee));        \\n            //check if current tick is outside sell range\\n            (,int24 tick,,,,,) = pool.slot0();\\n            if(params.token0Amount > 0) {\\n                require(tick <= params.lowerTick, \\\"Current price of pool doesn't match desired sell range\\\");\\n            } else {\\n                require(tick >= params.upperTick, \\\"Current price of pool doesn't match desired sell range\\\");\\n            }\\n        }\\n        // Approve the position manager\\n        if(params.token0Amount > 0) {\\n            // get token from user    \\n            if(params.token0 != address(weth9) || ethAmount == 0) {\\n                UniswapTransferHelper.safeTransferFrom(params.token0, msg.sender, address(this), params.token0Amount);            \\n                UniswapTransferHelper.safeApprove(params.token0, address(nonfungiblePositionManager), params.token0Amount);\\n            }\\n        } else {\\n            if(params.token1 != address(weth9) || ethAmount == 0) {\\n                UniswapTransferHelper.safeTransferFrom(params.token1, msg.sender, address(this), params.token1Amount);\\n                UniswapTransferHelper.safeApprove(params.token1, address(nonfungiblePositionManager), params.token1Amount);\\n            }\\n        }\\n        INonfungiblePositionManager.MintParams memory uniParams =\\n            INonfungiblePositionManager.MintParams({\\n                token0: params.token0,\\n                token1: params.token1,\\n                fee: params.poolFee,\\n                tickLower: params.lowerTick,\\n                tickUpper: params.upperTick,\\n                amount0Desired: params.token0Amount,\\n                amount1Desired: params.token1Amount,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                recipient: address(this),\\n                deadline: block.timestamp\\n            });\\n\\n        uint128 liquidity = 0;\\n        (tokenId,liquidity,,) = nonfungiblePositionManager.mint{value: ethAmount}(uniParams);\\n\\n        if(params.token0Amount > 0) {\\n            _storePositionInfo(tokenId, params.upperTick, true, msg.sender, params.protocolFee, params.unwrapToNative);\\n        } else {\\n            _storePositionInfo(tokenId, params.lowerTick, false, msg.sender, params.protocolFee, params.unwrapToNative);\\n        }\\n        emit AddPosition(tokenId, msg.sender, liquidity, params.token0Amount > 0);\\n        return tokenId;\\n    }\\n\\n    /*****************************************/\\n    /********** INTERNAL FUNCTIONS ***********/\\n    /*****************************************/\\n\\n    /// @dev Transfers the uniswap liquidity position NFT to the receiver and removes the given position data from the internal storage.\\n    /// @param tokenId Token ID identifying the position to be removed.\\n    /// @param receiver Receiver of the uniswap liqudity position NFT.\\n    function _removePosition(uint256 tokenId, address receiver) internal {\\n        // remove information related to tokenId\\n        delete positionInfos[tokenId];\\n        // remove token from ownedTokens array by reducing the arrays size and moving the token in last position to the spot of the to be deleted one.\\n        // set last token to index of removed token, then decrease array size (so we don't have gaps in the array)\\n        uint256 tokenIndex = ownedTokensIndex[tokenId];\\n        uint256 lastTokenIndex = (ownedTokens[receiver].length - 1);\\n        uint256 lastToken = ownedTokens[receiver][lastTokenIndex];\\n        ownedTokens[receiver][tokenIndex] = lastToken;\\n        ownedTokens[receiver].pop();\\n        ownedTokensIndex[tokenId] = 0;\\n        ownedTokensIndex[lastToken] = tokenIndex;\\n        // transfer ownership to original owner\\n        nonfungiblePositionManager.safeTransferFrom(address(this), receiver, tokenId);\\n    }\\n\\n    /// @dev Saves information about a position in smart contract storage.\\n    /// @param tokenId Token ID of the position to be stored.\\n    /// @param sellTarget Uniswap liquidity pool tick which needs to be reached to close the position.\\n    /// @param sellAboveTarget When true the uniswap liquidity pool tick needs to be at or over the saved sellTarget value. If false it needs to be at or under the value.\\n    /// @param owner The address of the owner of the position.\\n    /// @param fee The protocol fee for this position.\\n    function _storePositionInfo(uint256 tokenId, int24 sellTarget, bool sellAboveTarget, address owner, uint16 fee, bool unwrapToNative) internal {\\n        positionInfos[tokenId] = PositionInfo({owner: owner, sellTarget: sellTarget, sellAboveTarget: sellAboveTarget, fee: fee, unwrapToNative: unwrapToNative});\\n        uint256 length = ownedTokens[owner].length;\\n        ownedTokens[owner].push(tokenId);\\n        ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /// @dev Closes the uniswap liquidity position and returning the assets to the position owner. If stoppedByProtocol is set the protocol fee is deducted and sent \\n    ///      to the protocol fee receiver address.\\n    /// @param tokenId The token ID identifying the position.\\n    /// @param stoppedByProtocol If true the function was triggered by stop position and the protocol fee is deducted from the assets.\\n    ///                          Otherwise it was triggered by the owner itself and no fee is deducted.\\n    /// @return success True if the position could be liquidated and paid out.\\n    function _payOutPosition(uint256 tokenId, bool stoppedByProtocol) internal returns (bool success) {\\n        // get position & pool info\\n        (,,address token0, address token1, uint24 fee,,, uint128 liquidity,,,,) =  nonfungiblePositionManager.positions(tokenId);        \\n        PositionInfo memory position = positionInfos[tokenId];\\n\\n        require(position.owner != address(0), 'Position not found');\\n        {\\n            IUniswapV3Pool pool = IUniswapV3Pool(uniswapV3Factory.getPool(token0, token1, fee));        \\n            // only check sell targets when stopped by protocol\\n            if(stoppedByProtocol) {\\n                (,int24 tick,,,,,) = pool.slot0();\\n                if(position.sellAboveTarget) {\\n                    require(tick >= position.sellTarget, 'Sell target not reached. Current tick below sell target tick.');\\n                } else {\\n                    require(tick <= position.sellTarget, 'Sell target not reached. Current tick above sell target tick.');\\n                }\\n            }\\n            // remove all liquidity from position\\n            INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager.DecreaseLiquidityParams(tokenId,\\n            liquidity,\\n            0, //amount0Min\\n            0, //amount1Min;\\n            block.timestamp // deadline\\n            );\\n            // not checking return value since we collect maximum anyways\\n            nonfungiblePositionManager.decreaseLiquidity(params);\\n        }\\n        {\\n            // collect all tokens (fees + removed liquidity)\\n            INonfungiblePositionManager.CollectParams memory params2 =\\n                INonfungiblePositionManager.CollectParams({\\n                    tokenId: tokenId,\\n                    recipient: address(this),\\n                    amount0Max: type(uint128).max,\\n                    amount1Max: type(uint128).max\\n                });\\n            (uint256 collectedAmount0, uint256 collectedAmount1) = nonfungiblePositionManager.collect(params2);\\n            \\n            // calculate fee\\n            uint256 fee0 = 0;\\n            uint256 fee1 = 0;\\n            \\n            if(stoppedByProtocol) {\\n                // we accept loss of precision here\\n                fee0 = (collectedAmount0 / 1000) * position.fee;\\n                fee1 = (collectedAmount1 / 1000) * position.fee;\\n            }\\n                    \\n            // transfer tokens to position owner and fees to protocol owner if applicable\\n            _payOutToken(collectedAmount0, fee0, token0, position.owner, position.unwrapToNative);\\n            _payOutToken(collectedAmount1, fee1, token1, position.owner, position.unwrapToNative);        \\n            _removePosition(tokenId, position.owner);\\n        }\\n        return true;\\n    }\\n\\n\\n    /// @dev sends the specified token amount to the owner minus the specified fee which is sent to the protocol fee receiver address\\n    /// @param collectedAmount Amount of the token which is to be paid out\\n    /// @param fee Fee amount to be deduced from the amount to be paid out\\n    /// @param token Address of the token which is to be paid out\\n    /// @param receiver Receiver of the token to be paid out\\n    /// @param unwrapToNative If true wrapped ether gets unwrapped before being sent out\\n    function _payOutToken(uint256 collectedAmount, uint256 fee, address token, address receiver, bool unwrapToNative) internal {\\n        if(collectedAmount > 0) {\\n            if (unwrapToNative && token == address(weth9)) {\\n                weth9.withdraw(collectedAmount);\\n                UniswapTransferHelper.safeTransferETH(receiver, collectedAmount - fee);\\n            } else {\\n                UniswapTransferHelper.safeTransfer(token, receiver, collectedAmount - fee);\\n            }\\n        }\\n        if(fee > 0) {\\n            // calculate reward for address who closed position\\n            uint256 reward = (fee * currentStopPositionReward)/100;\\n            if (unwrapToNative && token == address(weth9)) {\\n                UniswapTransferHelper.safeTransferETH(protocolFeeReceiver, fee - reward);\\n            } else {\\n                UniswapTransferHelper.safeTransfer(token, protocolFeeReceiver, fee - reward);\\n            }\\n            if(reward > 0) {\\n                if (unwrapToNative && token == address(weth9)) {\\n                    UniswapTransferHelper.safeTransferETH(msg.sender, reward);\\n                } else {\\n                    UniswapTransferHelper.safeTransfer(token, msg.sender, reward);\\n                }    \\n            }\\n        }\\n    }\\n\\n\\n    // @dev Escape hatch for any eth stranded in the contract. Only callable by operator.\\n    function retrieveEth() external onlyOperator returns(bool){\\n        return protocolFeeReceiver.send(address(this).balance);\\n    }\\n\\n    // @dev Escape hatch to retrieve ERC20s stranded in the contract. Only callable by operator.\\n    function retrieveERC20(address token) external onlyOperator {\\n        IERC20 erc20 = IERC20(token);\\n        UniswapTransferHelper.safeTransfer(token, protocolFeeReceiver, erc20.balanceOf(address(this)));\\n    }\\n\\n    // @dev receive function to be able to receive ether on contract \\n    receive() external payable { }\\n}\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"contracts/interfaces/uniswap/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INonfungiblePositionManager is IERC721 {\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function collect(CollectParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n}\\n\"},\"contracts/interfaces/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.9;\\npragma abicoder v2;\\n\\ninterface IUniswapV3Pool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n    function tickSpacing() external view returns (int24);\\n}\\n\"},\"contracts/interfaces/uniswap/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.9;\\npragma abicoder v2;\\n\\ninterface IUniswapV3Factory {\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n}\\n\"},\"contracts/interfaces/uniswap/IWETH9.sol\":{\"content\":\"pragma solidity >=0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\"},\"contracts/UniswapTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.6;\\n\\nimport \\\"contracts/interfaces/uniswap/IWETH9.sol\\\";\\n\\n// File @uniswap/v3-periphery/contracts/libraries/TransferHelper.sol@v1.1.1\\n//\\nlibrary UniswapTransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    // @notice Transfers tokens from msg.sender to a recipient\\n    // @dev Errors with ST if transfer fails\\n    // @param token The contract address of the token which will be transferred\\n    // @param to The recipient of the transfer\\n    // @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"ST\\\"\\n        );\\n    }\\n\\n    // @notice Approves the stipulated contract to spend the given allowance in the given token\\n    // @dev Errors with \\\"SA\\\" if transfer fails\\n    // @param token The contract address of the token to be approved\\n    // @param to The target of the approval\\n    // @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SA\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"}}}","address":"0x400C325BCac8C1C89974093b15bc800231d872E2","bytecode":"0x6101006040523480156200001257600080fd5b5060405162003191380380620031918339810160408190526200003591620000bd565b6001600160a01b03928316608081905291831660a05260e0919091521660c052600080546001600160a01b031916339081179091556001805461ffff60b01b1961ffff60a01b199093166001600160b01b031990911617600160a01b1791909116600160b81b17905562000111565b6001600160a01b0381168114620000ba57600080fd5b50565b600080600060608486031215620000d357600080fd5b8351620000e081620000a4565b6020850151909350620000f381620000a4565b60408501519092506200010681620000a4565b809150509250925092565b60805160a05160c05160e051612fcf620001c2600039600061068b01526000818161032601528181610ea401528181610ef4015281816112710152818161131d0152818161274a015281816127b20152818161287801526128fc0152600081816104a701528181610fe00152611f10015260008181610599015281816112e50152818161139a0152818161149401528181611c8d01528181611cfa0152818161218f01526122920152612fcf6000f3fe60806040526004361061018f5760003560e01c80637d64a448116100d6578063c9a973581161007f578063d619d21611610059578063d619d21614610664578063e671e1f414610679578063f275c0ce146106ad57600080fd5b8063c9a97358146105f1578063cd4e9ffa14610611578063ce1e09e01461063157600080fd5b8063b103dd29116100b0578063b103dd2914610567578063b44a272214610587578063c41a360a146105bb57600080fd5b80637d64a448146104f957806386d087fb14610519578063b0ec0c941461053a57600080fd5b806350879c1c116101385780635917fe5a116101125780635917fe5a146104755780635b549182146104955780637bcaa485146104c957600080fd5b806350879c1c146103145780635089cb2714610348578063519f50991461036857600080fd5b806339a51be51161016957806339a51be51461029f57806346877b1a146102bf5780634ab9bc80146102df57600080fd5b8063068a33361461019b5780630a1d7c5f146101d857806317893e3c146101fa57600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506000546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e457600080fd5b506101f86101f3366004612a11565b6106ce565b005b34801561020657600080fd5b5061025f610215366004612a11565b6002602081905260009182526040909120546001600160a01b03811691600160a01b8204900b9061ffff600160b81b8204169060ff600160c81b8204811691600160d01b90041685565b604080516001600160a01b03909616865260029490940b602086015261ffff9092169284019290925290151560608301521515608082015260a0016101cf565b3480156102ab57600080fd5b506001546101bb906001600160a01b031681565b3480156102cb57600080fd5b506101f86102da366004612a42565b610793565b3480156102eb57600080fd5b5060015461030190600160a01b900461ffff1681565b60405161ffff90911681526020016101cf565b34801561032057600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035457600080fd5b506101f8610363366004612a6e565b6108bf565b34801561037457600080fd5b5061041f610383366004612a11565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915250600090815260026020818152604092839020835160a08101855290546001600160a01b0381168252600160a01b810490930b9181019190915261ffff600160b81b8304169281019290925260ff600160c81b8204811615156060840152600160d01b909104161515608082015290565b6040516101cf9190600060a0820190506001600160a01b038351168252602083015160020b602083015261ffff604084015116604083015260608301511515606083015260808301511515608083015292915050565b34801561048157600080fd5b506101f8610490366004612a42565b6109ed565b3480156104a157600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104d557600080fd5b506104e96104e4366004612a11565b610b12565b60405190151581526020016101cf565b34801561050557600080fd5b506101f8610514366004612a9b565b610b89565b61052c610527366004612ab8565b610c64565b6040519081526020016101cf565b34801561054657600080fd5b5061055a610555366004612a42565b611755565b6040516101cf9190612ad1565b34801561057357600080fd5b506101f8610582366004612a42565b6117c1565b34801561059357600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c757600080fd5b506101bb6105d6366004612a11565b6000908152600260205260409020546001600160a01b031690565b3480156105fd57600080fd5b506101f861060c366004612b23565b6118cc565b34801561061d57600080fd5b506104e961062c366004612a11565b6119a5565b34801561063d57600080fd5b5060015461065290600160b01b900460ff1681565b60405160ff90911681526020016101cf565b34801561067057600080fd5b506104e9611a69565b34801561068557600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106b957600080fd5b506001546104e990600160b81b900460ff1681565b60008181526002602052604090205481906001600160a01b031633146107505760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e206f6e6c7920616c6c6f77656420666f72206f776e657260448201526b1037b3103837b9b4ba34b7b760a11b60648201526084015b60405180910390fd5b61075a8233611b07565b60405182815233907faa1d04eb954a2b38e872304c999eb9f06b5f86621d9bc8a57eb4e66280005a969060200160405180910390a25050565b6000546001600160a01b031633146108045760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001600160a01b03811660000361085d5760405162461bcd60e51b815260206004820152601760248201527f3078302061646472657373206e6f7420616c6c6f7765640000000000000000006044820152606401610747565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fbdf37c276f641820b141429d245add2552b4118c0866e5a78638e3de5ef18d9d906020015b60405180910390a150565b6000546001600160a01b031633146109305760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b60648160ff1611156109845760405162461bcd60e51b815260206004820152601760248201527f726577617264203e313030206e6f7420616c6c6f7765640000000000000000006044820152606401610747565b600180547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b60ff8416908102919091179091556040519081527f34ccf789e3d35be7a0c07967faa3b53109194208c75d46bfaf8f14389ae26073906020016108b4565b6000546001600160a01b03163314610a5e5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001600160a01b038116600003610ab75760405162461bcd60e51b815260206004820152601760248201527f3078302061646472657373206e6f7420616c6c6f7765640000000000000000006044820152606401610747565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f99d737e0adf2c449d71890b86772885ec7959b152ddb265f76325b6e68e105d3906020016108b4565b6000818152600260205260408120546001600160a01b031681610b36846001611cf0565b90508015610b8257816001600160a01b03167fd166759110875e7043f195882c2c5c5ae3e22d3bed496bb1da5b0a6efc1bbad685604051610b7991815260200190565b60405180910390a25b9392505050565b6000546001600160a01b03163314610bfa5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b600180547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8416908102919091179091556040519081527f5fc7685da41ea37ba03394f9e2de6b67c85c29d24b740fbc171e960a2f74972f906020016108b4565b600154600090600160b81b900460ff16610cc05760405162461bcd60e51b815260206004820152601f60248201527f4465706f73697473206172652063757272656e746c792064697361626c6564006044820152606401610747565b8160e0013580421115610d155760405162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c64000000000000000000000000006044820152606401610747565b60408301351580610d2857506060830135155b610d9a5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e20616d6f756e74206f6620746f6b656e30206f7220746f6b656e3160448201527f206d7573742062652030000000000000000000000000000000000000000000006064820152608401610747565b600083604001351180610db1575060008360600135115b610dfd5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420746f6b656e20616d6f756e740000000000000000000000006044820152606401610747565b600154600160a01b900461ffff16610e1d61012085016101008601612a9b565b61ffff1610158015610e4657506101f4610e3f61012085016101008601612a9b565b61ffff1611155b610e925760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f746f636f6c206665650000000000000000000000006044820152606401610747565b60003415610fd4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610ed16020860186612a42565b6001600160a01b031603610eea57506040830135610f85565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610f246040860160208701612a42565b6001600160a01b031603610f3d57506060830135610f85565b60405162461bcd60e51b815260206004820152601360248201527f4d6573736167652076616c7565206e6f742030000000000000000000000000006044820152606401610747565b348114610fd45760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206d6573736167652076616c756500000000000000000000006044820152606401610747565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631698ee826110126020880188612a42565b6110226040890160208a01612a42565b61103260e08a0160c08b01612b51565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015262ffffff166044820152606401602060405180830381865afa1580156110a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c59190612b7e565b90506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190612bb5565b50505050509150506000866040013511156111d05761115060a0870160808801612c51565b60020b8160020b13156111cb5760405162461bcd60e51b815260206004820152603660248201527f43757272656e74207072696365206f6620706f6f6c20646f65736e2774206d6160448201527f74636820646573697265642073656c6c2072616e6765000000000000000000006064820152608401610747565b61125b565b6111e060c0870160a08801612c51565b60020b8160020b121561125b5760405162461bcd60e51b815260206004820152603660248201527f43757272656e74207072696365206f6620706f6f6c20646f65736e2774206d6160448201527f74636820646573697265642073656c6c2072616e6765000000000000000000006064820152608401610747565b5050604084013515611313576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661129e6020860186612a42565b6001600160a01b03161415806112b2575080155b1561130e576112d36112c76020860186612a42565b3330876040013561239c565b61130e6112e36020860186612a42565b7f000000000000000000000000000000000000000000000000000000000000000086604001356124d9565b6113c3565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661134d6040860160208701612a42565b6001600160a01b0316141580611361575080155b156113c3576113856113796040860160208701612a42565b3330876060013561239c565b6113c36113986040860160208701612a42565b7f000000000000000000000000000000000000000000000000000000000000000086606001356124d9565b604080516101608101909152600090806113e06020880188612a42565b6001600160a01b031681526020018660200160208101906114019190612a42565b6001600160a01b0316815260200161141f60e0880160c08901612b51565b62ffffff16815260200161143960a0880160808901612c51565b60020b815260200161145160c0880160a08901612c51565b60020b815260200186604001358152602001866060013581526020016000815260200160008152602001306001600160a01b0316815260200142815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638831645684846040518363ffffffff1660e01b81526004016114df9190612c6e565b60806040518083038185885af11580156114fd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115229190612d52565b509196509150506040860135156116cb576116c68561154760c0890160a08a01612c51565b60013361155c6101208c016101008d01612a9b565b61156e6101408d016101208e01612b23565b6040805160a0810182526001600160a01b03948516808252600297880b602080840191825261ffff968716848601908152981515606085019081529515156080850190815260008c81529a8252858b209451855493519a51975191511515600160d01b027fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff921515600160c81b027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff99909a16600160b81b02989098167fffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffff62ffffff909c16600160a01b027fffffffffffffffffff000000000000000000000000000000000000000000000090951691909a1617929092179890981696909617949094179490941691909117909255835260038252808320805460018101825590845282842081018590559383526004909152902055565b6116f4565b6116f4856116df60a0890160808a01612c51565b60003361155c6101208c016101008d01612a9b565b604080518681526fffffffffffffffffffffffffffffffff8316602082015287820135151581830152905133917f84857eda562bb68e0b47f5fdb7037e19a483b460c88f0399b98c01d91ac7b1f9919081900360600190a250505050919050565b6001600160a01b0381166000908152600360209081526040918290208054835181840281018401909452808452606093928301828280156117b557602002820191906000526020600020905b8154815260200190600101908083116117a1575b50505050509050919050565b6000546001600160a01b031633146118325760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015282916118c89183916001600160a01b0390811691908316906370a0823190602401602060405180830381865afa15801561189f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c39190612d8e565b61260d565b5050565b6000546001600160a01b0316331461193d5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b60018054821515600160b81b027fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff9091161790556040517f1117e04c4b9c84c94ec4def2d3be770c1de27588c20313630309abe93ebd6651906108b490831515815260200190565b60008181526002602052604081205482906001600160a01b03163314611a225760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e206f6e6c7920616c6c6f77656420666f72206f776e657260448201526b1037b3103837b9b4ba34b7b760a11b6064820152608401610747565b6000611a2f846000611cf0565b90508015610b825760405184815233907f1efe7349ed20ea755a19f4f0d5beec843d0d1c73eeb8d60e53fa7eb2537e231b90602001610b79565b600080546001600160a01b03163314611adb5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f194505050505090565b600082815260026020908152604080832080547fffffffffff00000000000000000000000000000000000000000000000000000016905560048252808320546001600160a01b03851684526003909252822054909190611b6990600190612dbd565b6001600160a01b03841660009081526003602052604081208054929350909183908110611b9857611b98612dd0565b906000526020600020015490508060036000866001600160a01b03166001600160a01b031681526020019081526020016000208481548110611bdc57611bdc612dd0565b60009182526020808320909101929092556001600160a01b0386168152600390915260409020805480611c1157611c11612de6565b60008281526020808220600019908401810183905590920190925586825260049081905260408083208390558383529182902085905590517f42842e0e00000000000000000000000000000000000000000000000000000000815230918101919091526001600160a01b038581166024830152604482018790527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b158015611cd157600080fd5b505af1158015611ce5573d6000803e3d6000fd5b505050505050505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399fbab88886040518263ffffffff1660e01b8152600401611d4691815260200190565b61018060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612e07565b505050509750505095509550955050506000600260008981526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900460020b60020b60020b81526020016000820160179054906101000a900461ffff1661ffff1661ffff1681526020016000820160199054906101000a900460ff1615151515815260200160008201601a9054906101000a900460ff161515151581525050905060006001600160a01b031681600001516001600160a01b031603611ec25760405162461bcd60e51b815260206004820152601260248201527f506f736974696f6e206e6f7420666f756e6400000000000000000000000000006044820152606401610747565b6040517f1698ee820000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015262ffffff851660448301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631698ee8290606401602060405180830381865afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d9190612b7e565b90508715612102576000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe99190612bb5565b505050505091505082606001511561208057826020015160020b8160020b121561207b5760405162461bcd60e51b815260206004820152603d60248201527f53656c6c20746172676574206e6f7420726561636865642e2043757272656e7460448201527f207469636b2062656c6f772073656c6c20746172676574207469636b2e0000006064820152608401610747565b612100565b826020015160020b8160020b13156121005760405162461bcd60e51b815260206004820152603d60248201527f53656c6c20746172676574206e6f7420726561636865642e2043757272656e7460448201527f207469636b2061626f76652073656c6c20746172676574207469636b2e0000006064820152608401610747565b505b6040805160a0810182528a81526fffffffffffffffffffffffffffffffff85811660208301908152600083850181815260608501918252426080860190815295517f0c49ccbe0000000000000000000000000000000000000000000000000000000081528551600482015292519093166024830152915160448201529051606482015291516084830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630c49ccbe9060a40160408051808303816000875af11580156121df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122039190612ee8565b5050604080516080810182528b815230602082019081526fffffffffffffffffffffffffffffffff8284018181526060840182815294517ffc6f78650000000000000000000000000000000000000000000000000000000081528451600482015292516001600160a01b03908116602485015290518216604484015293511660648201529093506000925082917f0000000000000000000000000000000000000000000000000000000000000000169063fc6f78659060840160408051808303816000875af11580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe9190612ee8565b915091506000808b1561234f57604086015161ffff166123206103e886612f0c565b61232a9190612f2e565b604087015190925061ffff166123426103e885612f0c565b61234c9190612f2e565b90505b61236484838c89600001518a6080015161273a565b61237983828b89600001518a6080015161273a565b6123878d8760000151611b07565b50505050506001955050505050505b92915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916124199190612f4d565b6000604051808303816000865af19150503d8060008114612456576040519150601f19603f3d011682016040523d82523d6000602084013e61245b565b606091505b50915091508180156124855750805115806124855750808060200190518101906124859190612f7c565b6124d15760405162461bcd60e51b815260206004820152600360248201527f53544600000000000000000000000000000000000000000000000000000000006044820152606401610747565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161254e9190612f4d565b6000604051808303816000865af19150503d806000811461258b576040519150601f19603f3d011682016040523d82523d6000602084013e612590565b606091505b50915091508180156125ba5750805115806125ba5750808060200190518101906125ba9190612f7c565b6126065760405162461bcd60e51b815260206004820152600260248201527f53410000000000000000000000000000000000000000000000000000000000006044820152606401610747565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916126829190612f4d565b6000604051808303816000865af19150503d80600081146126bf576040519150601f19603f3d011682016040523d82523d6000602084013e6126c4565b606091505b50915091508180156126ee5750805115806126ee5750808060200190518101906126ee9190612f7c565b6126065760405162461bcd60e51b815260206004820152600260248201527f53540000000000000000000000000000000000000000000000000000000000006044820152606401610747565b841561283f5780801561277e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b15612830576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156127fe57600080fd5b505af1158015612812573d6000803e3d6000fd5b5050505061282b8285876128269190612dbd565b61294f565b61283f565b61283f83836118c38789612dbd565b83156126065760015460009060649061286290600160b01b900460ff1687612f2e565b61286c9190612f0c565b90508180156128ac57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b156128d0576001546128cb906001600160a01b03166128268388612dbd565b6128ec565b6001546128ec9085906001600160a01b03166118c38489612dbd565b80156124d15781801561293057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b156129445761293f338261294f565b6124d1565b6124d184338361260d565b604080516000808252602082019092526001600160a01b0384169083906040516129799190612f4d565b60006040518083038185875af1925050503d80600081146129b6576040519150601f19603f3d011682016040523d82523d6000602084013e6129bb565b606091505b5050905080612a0c5760405162461bcd60e51b815260206004820152600360248201527f53544500000000000000000000000000000000000000000000000000000000006044820152606401610747565b505050565b600060208284031215612a2357600080fd5b5035919050565b6001600160a01b0381168114612a3f57600080fd5b50565b600060208284031215612a5457600080fd5b8135610b8281612a2a565b60ff81168114612a3f57600080fd5b600060208284031215612a8057600080fd5b8135610b8281612a5f565b61ffff81168114612a3f57600080fd5b600060208284031215612aad57600080fd5b8135610b8281612a8b565b60006101408284031215612acb57600080fd5b50919050565b6020808252825182820181905260009190848201906040850190845b81811015612b0957835183529284019291840191600101612aed565b50909695505050505050565b8015158114612a3f57600080fd5b600060208284031215612b3557600080fd5b8135610b8281612b15565b62ffffff81168114612a3f57600080fd5b600060208284031215612b6357600080fd5b8135610b8281612b40565b8051612b7981612a2a565b919050565b600060208284031215612b9057600080fd5b8151610b8281612a2a565b8060020b8114612a3f57600080fd5b8051612b7981612b9b565b600080600080600080600060e0888a031215612bd057600080fd5b8751612bdb81612a2a565b6020890151909750612bec81612b9b565b6040890151909650612bfd81612a8b565b6060890151909550612c0e81612a8b565b6080890151909450612c1f81612a8b565b60a0890151909350612c3081612a5f565b60c0890151909250612c4181612b15565b8091505092959891949750929550565b600060208284031215612c6357600080fd5b8135610b8281612b9b565b81516001600160a01b0316815261016081016020830151612c9a60208401826001600160a01b03169052565b506040830151612cb1604084018262ffffff169052565b506060830151612cc6606084018260020b9052565b506080830151612cdb608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151612d21828501826001600160a01b03169052565b505061014092830151919092015290565b80516fffffffffffffffffffffffffffffffff81168114612b7957600080fd5b60008060008060808587031215612d6857600080fd5b84519350612d7860208601612d32565b6040860151606090960151949790965092505050565b600060208284031215612da057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561239657612396612da7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8051612b7981612b40565b6000806000806000806000806000806000806101808d8f031215612e2a57600080fd5b8c516bffffffffffffffffffffffff81168114612e4657600080fd5b9b50612e5460208e01612b6e565b9a50612e6260408e01612b6e565b9950612e7060608e01612b6e565b9850612e7e60808e01612dfc565b9750612e8c60a08e01612baa565b9650612e9a60c08e01612baa565b9550612ea860e08e01612d32565b94506101008d015193506101208d01519250612ec76101408e01612d32565b9150612ed66101608e01612d32565b90509295989b509295989b509295989b565b60008060408385031215612efb57600080fd5b505080516020909101519092909150565b600082612f2957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612f4857612f48612da7565b500290565b6000825160005b81811015612f6e5760208186018101518583015201612f54565b506000920191825250919050565b600060208284031215612f8e57600080fd5b8151610b8281612b1556fea26469706673582212201c1d54174c17aef9f9e3a36d53292673f1514d248e0e4d58a14727524cf7a0c764736f6c63430008100033","deployedBytecode":"0x60806040526004361061018f5760003560e01c80637d64a448116100d6578063c9a973581161007f578063d619d21611610059578063d619d21614610664578063e671e1f414610679578063f275c0ce146106ad57600080fd5b8063c9a97358146105f1578063cd4e9ffa14610611578063ce1e09e01461063157600080fd5b8063b103dd29116100b0578063b103dd2914610567578063b44a272214610587578063c41a360a146105bb57600080fd5b80637d64a448146104f957806386d087fb14610519578063b0ec0c941461053a57600080fd5b806350879c1c116101385780635917fe5a116101125780635917fe5a146104755780635b549182146104955780637bcaa485146104c957600080fd5b806350879c1c146103145780635089cb2714610348578063519f50991461036857600080fd5b806339a51be51161016957806339a51be51461029f57806346877b1a146102bf5780634ab9bc80146102df57600080fd5b8063068a33361461019b5780630a1d7c5f146101d857806317893e3c146101fa57600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506000546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e457600080fd5b506101f86101f3366004612a11565b6106ce565b005b34801561020657600080fd5b5061025f610215366004612a11565b6002602081905260009182526040909120546001600160a01b03811691600160a01b8204900b9061ffff600160b81b8204169060ff600160c81b8204811691600160d01b90041685565b604080516001600160a01b03909616865260029490940b602086015261ffff9092169284019290925290151560608301521515608082015260a0016101cf565b3480156102ab57600080fd5b506001546101bb906001600160a01b031681565b3480156102cb57600080fd5b506101f86102da366004612a42565b610793565b3480156102eb57600080fd5b5060015461030190600160a01b900461ffff1681565b60405161ffff90911681526020016101cf565b34801561032057600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035457600080fd5b506101f8610363366004612a6e565b6108bf565b34801561037457600080fd5b5061041f610383366004612a11565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915250600090815260026020818152604092839020835160a08101855290546001600160a01b0381168252600160a01b810490930b9181019190915261ffff600160b81b8304169281019290925260ff600160c81b8204811615156060840152600160d01b909104161515608082015290565b6040516101cf9190600060a0820190506001600160a01b038351168252602083015160020b602083015261ffff604084015116604083015260608301511515606083015260808301511515608083015292915050565b34801561048157600080fd5b506101f8610490366004612a42565b6109ed565b3480156104a157600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104d557600080fd5b506104e96104e4366004612a11565b610b12565b60405190151581526020016101cf565b34801561050557600080fd5b506101f8610514366004612a9b565b610b89565b61052c610527366004612ab8565b610c64565b6040519081526020016101cf565b34801561054657600080fd5b5061055a610555366004612a42565b611755565b6040516101cf9190612ad1565b34801561057357600080fd5b506101f8610582366004612a42565b6117c1565b34801561059357600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c757600080fd5b506101bb6105d6366004612a11565b6000908152600260205260409020546001600160a01b031690565b3480156105fd57600080fd5b506101f861060c366004612b23565b6118cc565b34801561061d57600080fd5b506104e961062c366004612a11565b6119a5565b34801561063d57600080fd5b5060015461065290600160b01b900460ff1681565b60405160ff90911681526020016101cf565b34801561067057600080fd5b506104e9611a69565b34801561068557600080fd5b506101bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106b957600080fd5b506001546104e990600160b81b900460ff1681565b60008181526002602052604090205481906001600160a01b031633146107505760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e206f6e6c7920616c6c6f77656420666f72206f776e657260448201526b1037b3103837b9b4ba34b7b760a11b60648201526084015b60405180910390fd5b61075a8233611b07565b60405182815233907faa1d04eb954a2b38e872304c999eb9f06b5f86621d9bc8a57eb4e66280005a969060200160405180910390a25050565b6000546001600160a01b031633146108045760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001600160a01b03811660000361085d5760405162461bcd60e51b815260206004820152601760248201527f3078302061646472657373206e6f7420616c6c6f7765640000000000000000006044820152606401610747565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fbdf37c276f641820b141429d245add2552b4118c0866e5a78638e3de5ef18d9d906020015b60405180910390a150565b6000546001600160a01b031633146109305760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b60648160ff1611156109845760405162461bcd60e51b815260206004820152601760248201527f726577617264203e313030206e6f7420616c6c6f7765640000000000000000006044820152606401610747565b600180547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b60ff8416908102919091179091556040519081527f34ccf789e3d35be7a0c07967faa3b53109194208c75d46bfaf8f14389ae26073906020016108b4565b6000546001600160a01b03163314610a5e5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001600160a01b038116600003610ab75760405162461bcd60e51b815260206004820152601760248201527f3078302061646472657373206e6f7420616c6c6f7765640000000000000000006044820152606401610747565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f99d737e0adf2c449d71890b86772885ec7959b152ddb265f76325b6e68e105d3906020016108b4565b6000818152600260205260408120546001600160a01b031681610b36846001611cf0565b90508015610b8257816001600160a01b03167fd166759110875e7043f195882c2c5c5ae3e22d3bed496bb1da5b0a6efc1bbad685604051610b7991815260200190565b60405180910390a25b9392505050565b6000546001600160a01b03163314610bfa5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b600180547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8416908102919091179091556040519081527f5fc7685da41ea37ba03394f9e2de6b67c85c29d24b740fbc171e960a2f74972f906020016108b4565b600154600090600160b81b900460ff16610cc05760405162461bcd60e51b815260206004820152601f60248201527f4465706f73697473206172652063757272656e746c792064697361626c6564006044820152606401610747565b8160e0013580421115610d155760405162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c64000000000000000000000000006044820152606401610747565b60408301351580610d2857506060830135155b610d9a5760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e20616d6f756e74206f6620746f6b656e30206f7220746f6b656e3160448201527f206d7573742062652030000000000000000000000000000000000000000000006064820152608401610747565b600083604001351180610db1575060008360600135115b610dfd5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420746f6b656e20616d6f756e740000000000000000000000006044820152606401610747565b600154600160a01b900461ffff16610e1d61012085016101008601612a9b565b61ffff1610158015610e4657506101f4610e3f61012085016101008601612a9b565b61ffff1611155b610e925760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f746f636f6c206665650000000000000000000000006044820152606401610747565b60003415610fd4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610ed16020860186612a42565b6001600160a01b031603610eea57506040830135610f85565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610f246040860160208701612a42565b6001600160a01b031603610f3d57506060830135610f85565b60405162461bcd60e51b815260206004820152601360248201527f4d6573736167652076616c7565206e6f742030000000000000000000000000006044820152606401610747565b348114610fd45760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206d6573736167652076616c756500000000000000000000006044820152606401610747565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631698ee826110126020880188612a42565b6110226040890160208a01612a42565b61103260e08a0160c08b01612b51565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015262ffffff166044820152606401602060405180830381865afa1580156110a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c59190612b7e565b90506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190612bb5565b50505050509150506000866040013511156111d05761115060a0870160808801612c51565b60020b8160020b13156111cb5760405162461bcd60e51b815260206004820152603660248201527f43757272656e74207072696365206f6620706f6f6c20646f65736e2774206d6160448201527f74636820646573697265642073656c6c2072616e6765000000000000000000006064820152608401610747565b61125b565b6111e060c0870160a08801612c51565b60020b8160020b121561125b5760405162461bcd60e51b815260206004820152603660248201527f43757272656e74207072696365206f6620706f6f6c20646f65736e2774206d6160448201527f74636820646573697265642073656c6c2072616e6765000000000000000000006064820152608401610747565b5050604084013515611313576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661129e6020860186612a42565b6001600160a01b03161415806112b2575080155b1561130e576112d36112c76020860186612a42565b3330876040013561239c565b61130e6112e36020860186612a42565b7f000000000000000000000000000000000000000000000000000000000000000086604001356124d9565b6113c3565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661134d6040860160208701612a42565b6001600160a01b0316141580611361575080155b156113c3576113856113796040860160208701612a42565b3330876060013561239c565b6113c36113986040860160208701612a42565b7f000000000000000000000000000000000000000000000000000000000000000086606001356124d9565b604080516101608101909152600090806113e06020880188612a42565b6001600160a01b031681526020018660200160208101906114019190612a42565b6001600160a01b0316815260200161141f60e0880160c08901612b51565b62ffffff16815260200161143960a0880160808901612c51565b60020b815260200161145160c0880160a08901612c51565b60020b815260200186604001358152602001866060013581526020016000815260200160008152602001306001600160a01b0316815260200142815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638831645684846040518363ffffffff1660e01b81526004016114df9190612c6e565b60806040518083038185885af11580156114fd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115229190612d52565b509196509150506040860135156116cb576116c68561154760c0890160a08a01612c51565b60013361155c6101208c016101008d01612a9b565b61156e6101408d016101208e01612b23565b6040805160a0810182526001600160a01b03948516808252600297880b602080840191825261ffff968716848601908152981515606085019081529515156080850190815260008c81529a8252858b209451855493519a51975191511515600160d01b027fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff921515600160c81b027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff99909a16600160b81b02989098167fffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffff62ffffff909c16600160a01b027fffffffffffffffffff000000000000000000000000000000000000000000000090951691909a1617929092179890981696909617949094179490941691909117909255835260038252808320805460018101825590845282842081018590559383526004909152902055565b6116f4565b6116f4856116df60a0890160808a01612c51565b60003361155c6101208c016101008d01612a9b565b604080518681526fffffffffffffffffffffffffffffffff8316602082015287820135151581830152905133917f84857eda562bb68e0b47f5fdb7037e19a483b460c88f0399b98c01d91ac7b1f9919081900360600190a250505050919050565b6001600160a01b0381166000908152600360209081526040918290208054835181840281018401909452808452606093928301828280156117b557602002820191906000526020600020905b8154815260200190600101908083116117a1575b50505050509050919050565b6000546001600160a01b031633146118325760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015282916118c89183916001600160a01b0390811691908316906370a0823190602401602060405180830381865afa15801561189f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c39190612d8e565b61260d565b5050565b6000546001600160a01b0316331461193d5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b60018054821515600160b81b027fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff9091161790556040517f1117e04c4b9c84c94ec4def2d3be770c1de27588c20313630309abe93ebd6651906108b490831515815260200190565b60008181526002602052604081205482906001600160a01b03163314611a225760405162461bcd60e51b815260206004820152602c60248201527f4f7065726174696f6e206f6e6c7920616c6c6f77656420666f72206f776e657260448201526b1037b3103837b9b4ba34b7b760a11b6064820152608401610747565b6000611a2f846000611cf0565b90508015610b825760405184815233907f1efe7349ed20ea755a19f4f0d5beec843d0d1c73eeb8d60e53fa7eb2537e231b90602001610b79565b600080546001600160a01b03163314611adb5760405162461bcd60e51b815260206004820152602e60248201527f4f70657261746f6e206f6e6c7920616c6c6f77656420666f72206f706572617460448201526d1bdc881bd98818dbdb9d1c9858dd60921b6064820152608401610747565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f194505050505090565b600082815260026020908152604080832080547fffffffffff00000000000000000000000000000000000000000000000000000016905560048252808320546001600160a01b03851684526003909252822054909190611b6990600190612dbd565b6001600160a01b03841660009081526003602052604081208054929350909183908110611b9857611b98612dd0565b906000526020600020015490508060036000866001600160a01b03166001600160a01b031681526020019081526020016000208481548110611bdc57611bdc612dd0565b60009182526020808320909101929092556001600160a01b0386168152600390915260409020805480611c1157611c11612de6565b60008281526020808220600019908401810183905590920190925586825260049081905260408083208390558383529182902085905590517f42842e0e00000000000000000000000000000000000000000000000000000000815230918101919091526001600160a01b038581166024830152604482018790527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b158015611cd157600080fd5b505af1158015611ce5573d6000803e3d6000fd5b505050505050505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399fbab88886040518263ffffffff1660e01b8152600401611d4691815260200190565b61018060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612e07565b505050509750505095509550955050506000600260008981526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900460020b60020b60020b81526020016000820160179054906101000a900461ffff1661ffff1661ffff1681526020016000820160199054906101000a900460ff1615151515815260200160008201601a9054906101000a900460ff161515151581525050905060006001600160a01b031681600001516001600160a01b031603611ec25760405162461bcd60e51b815260206004820152601260248201527f506f736974696f6e206e6f7420666f756e6400000000000000000000000000006044820152606401610747565b6040517f1698ee820000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015262ffffff851660448301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631698ee8290606401602060405180830381865afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d9190612b7e565b90508715612102576000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe99190612bb5565b505050505091505082606001511561208057826020015160020b8160020b121561207b5760405162461bcd60e51b815260206004820152603d60248201527f53656c6c20746172676574206e6f7420726561636865642e2043757272656e7460448201527f207469636b2062656c6f772073656c6c20746172676574207469636b2e0000006064820152608401610747565b612100565b826020015160020b8160020b13156121005760405162461bcd60e51b815260206004820152603d60248201527f53656c6c20746172676574206e6f7420726561636865642e2043757272656e7460448201527f207469636b2061626f76652073656c6c20746172676574207469636b2e0000006064820152608401610747565b505b6040805160a0810182528a81526fffffffffffffffffffffffffffffffff85811660208301908152600083850181815260608501918252426080860190815295517f0c49ccbe0000000000000000000000000000000000000000000000000000000081528551600482015292519093166024830152915160448201529051606482015291516084830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630c49ccbe9060a40160408051808303816000875af11580156121df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122039190612ee8565b5050604080516080810182528b815230602082019081526fffffffffffffffffffffffffffffffff8284018181526060840182815294517ffc6f78650000000000000000000000000000000000000000000000000000000081528451600482015292516001600160a01b03908116602485015290518216604484015293511660648201529093506000925082917f0000000000000000000000000000000000000000000000000000000000000000169063fc6f78659060840160408051808303816000875af11580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe9190612ee8565b915091506000808b1561234f57604086015161ffff166123206103e886612f0c565b61232a9190612f2e565b604087015190925061ffff166123426103e885612f0c565b61234c9190612f2e565b90505b61236484838c89600001518a6080015161273a565b61237983828b89600001518a6080015161273a565b6123878d8760000151611b07565b50505050506001955050505050505b92915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916124199190612f4d565b6000604051808303816000865af19150503d8060008114612456576040519150601f19603f3d011682016040523d82523d6000602084013e61245b565b606091505b50915091508180156124855750805115806124855750808060200190518101906124859190612f7c565b6124d15760405162461bcd60e51b815260206004820152600360248201527f53544600000000000000000000000000000000000000000000000000000000006044820152606401610747565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161254e9190612f4d565b6000604051808303816000865af19150503d806000811461258b576040519150601f19603f3d011682016040523d82523d6000602084013e612590565b606091505b50915091508180156125ba5750805115806125ba5750808060200190518101906125ba9190612f7c565b6126065760405162461bcd60e51b815260206004820152600260248201527f53410000000000000000000000000000000000000000000000000000000000006044820152606401610747565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916126829190612f4d565b6000604051808303816000865af19150503d80600081146126bf576040519150601f19603f3d011682016040523d82523d6000602084013e6126c4565b606091505b50915091508180156126ee5750805115806126ee5750808060200190518101906126ee9190612f7c565b6126065760405162461bcd60e51b815260206004820152600260248201527f53540000000000000000000000000000000000000000000000000000000000006044820152606401610747565b841561283f5780801561277e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b15612830576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156127fe57600080fd5b505af1158015612812573d6000803e3d6000fd5b5050505061282b8285876128269190612dbd565b61294f565b61283f565b61283f83836118c38789612dbd565b83156126065760015460009060649061286290600160b01b900460ff1687612f2e565b61286c9190612f0c565b90508180156128ac57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b156128d0576001546128cb906001600160a01b03166128268388612dbd565b6128ec565b6001546128ec9085906001600160a01b03166118c38489612dbd565b80156124d15781801561293057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b156129445761293f338261294f565b6124d1565b6124d184338361260d565b604080516000808252602082019092526001600160a01b0384169083906040516129799190612f4d565b60006040518083038185875af1925050503d80600081146129b6576040519150601f19603f3d011682016040523d82523d6000602084013e6129bb565b606091505b5050905080612a0c5760405162461bcd60e51b815260206004820152600360248201527f53544500000000000000000000000000000000000000000000000000000000006044820152606401610747565b505050565b600060208284031215612a2357600080fd5b5035919050565b6001600160a01b0381168114612a3f57600080fd5b50565b600060208284031215612a5457600080fd5b8135610b8281612a2a565b60ff81168114612a3f57600080fd5b600060208284031215612a8057600080fd5b8135610b8281612a5f565b61ffff81168114612a3f57600080fd5b600060208284031215612aad57600080fd5b8135610b8281612a8b565b60006101408284031215612acb57600080fd5b50919050565b6020808252825182820181905260009190848201906040850190845b81811015612b0957835183529284019291840191600101612aed565b50909695505050505050565b8015158114612a3f57600080fd5b600060208284031215612b3557600080fd5b8135610b8281612b15565b62ffffff81168114612a3f57600080fd5b600060208284031215612b6357600080fd5b8135610b8281612b40565b8051612b7981612a2a565b919050565b600060208284031215612b9057600080fd5b8151610b8281612a2a565b8060020b8114612a3f57600080fd5b8051612b7981612b9b565b600080600080600080600060e0888a031215612bd057600080fd5b8751612bdb81612a2a565b6020890151909750612bec81612b9b565b6040890151909650612bfd81612a8b565b6060890151909550612c0e81612a8b565b6080890151909450612c1f81612a8b565b60a0890151909350612c3081612a5f565b60c0890151909250612c4181612b15565b8091505092959891949750929550565b600060208284031215612c6357600080fd5b8135610b8281612b9b565b81516001600160a01b0316815261016081016020830151612c9a60208401826001600160a01b03169052565b506040830151612cb1604084018262ffffff169052565b506060830151612cc6606084018260020b9052565b506080830151612cdb608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151612d21828501826001600160a01b03169052565b505061014092830151919092015290565b80516fffffffffffffffffffffffffffffffff81168114612b7957600080fd5b60008060008060808587031215612d6857600080fd5b84519350612d7860208601612d32565b6040860151606090960151949790965092505050565b600060208284031215612da057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561239657612396612da7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8051612b7981612b40565b6000806000806000806000806000806000806101808d8f031215612e2a57600080fd5b8c516bffffffffffffffffffffffff81168114612e4657600080fd5b9b50612e5460208e01612b6e565b9a50612e6260408e01612b6e565b9950612e7060608e01612b6e565b9850612e7e60808e01612dfc565b9750612e8c60a08e01612baa565b9650612e9a60c08e01612baa565b9550612ea860e08e01612d32565b94506101008d015193506101208d01519250612ec76101408e01612d32565b9150612ed66101608e01612d32565b90509295989b509295989b509295989b565b60008060408385031215612efb57600080fd5b505080516020909101519092909150565b600082612f2957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612f4857612f48612da7565b500290565b6000825160005b81811015612f6e5760208186018101518583015201612f54565b506000920191825250919050565b600060208284031215612f8e57600080fd5b8151610b8281612b1556fea26469706673582212201c1d54174c17aef9f9e3a36d53292673f1514d248e0e4d58a14727524cf7a0c764736f6c63430008100033","abi":[{"inputs":[{"internalType":"contract INonfungiblePositionManager","name":"_nonfungiblePositionManager","type":"address"},{"internalType":"contract IUniswapV3Factory","name":"_uniswapV3Factory","type":"address"},{"internalType":"contract IWETH9","name":"_weth9","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"token","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"bool","name":"sellAbove","type":"bool"}],"name":"AddPosition","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"token","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"CancelPosition","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"token","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ClosePosition","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"DepositsActiveSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newFeeReceiver","type":"address"}],"name":"FeeReceiverSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"newFee","type":"uint16"}],"name":"MinimumFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newOperator","type":"address"}],"name":"OperatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"token","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovePosition","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"reward","type":"uint8"}],"name":"StopPositionRewardSet","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"cancelPosition","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentMinFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentStopPositionReward","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"depositsActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"getOwnedPositions","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getPositionInfo","outputs":[{"components":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"int24","name":"sellTarget","type":"int24"},{"internalType":"uint16","name":"fee","type":"uint16"},{"internalType":"bool","name":"sellAboveTarget","type":"bool"},{"internalType":"bool","name":"unwrapToNative","type":"bool"}],"internalType":"struct LimitRanger.PositionInfo","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"},{"internalType":"uint256","name":"token0Amount","type":"uint256"},{"internalType":"uint256","name":"token1Amount","type":"uint256"},{"internalType":"int24","name":"lowerTick","type":"int24"},{"internalType":"int24","name":"upperTick","type":"int24"},{"internalType":"uint24","name":"poolFee","type":"uint24"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint16","name":"protocolFee","type":"uint16"},{"internalType":"bool","name":"unwrapToNative","type":"bool"}],"internalType":"struct LimitRanger.MintParams","name":"params","type":"tuple"}],"name":"mintNewPosition","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"nonfungiblePositionManager","outputs":[{"internalType":"contract INonfungiblePositionManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"positionInfos","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"int24","name":"sellTarget","type":"int24"},{"internalType":"uint16","name":"fee","type":"uint16"},{"internalType":"bool","name":"sellAboveTarget","type":"bool"},{"internalType":"bool","name":"unwrapToNative","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFeeReceiver","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolOperator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"retrieveERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"retrieveEth","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"retrieveNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"active","type":"bool"}],"name":"setDepositsActive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"fee","type":"uint16"}],"name":"setMinimumFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"setProtocolFeeReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOperator","type":"address"}],"name":"setProtocolOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"reward","type":"uint8"}],"name":"setStopPositionReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"stopPosition","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"uniNft","outputs":[{"internalType":"contract IERC721","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"uniswapV3Factory","outputs":[{"internalType":"contract IUniswapV3Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weth9","outputs":[{"internalType":"contract IWETH9","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]}