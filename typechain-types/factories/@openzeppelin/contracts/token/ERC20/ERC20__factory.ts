/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20,
  ERC20Interface,
} from "../../../../../@openzeppelin/contracts/token/ERC20/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012c0380380620012c083398181016040528101906200003791906200012c565b816003908162000048919062000257565b5080600490816200005a919062000257565b50505062000330565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008b57600080fd5b815160018060401b0380821115620000a857620000a762000063565b5b601f1960405181603f83601f8701160116810191508082108383111715620000d557620000d462000063565b5b81604052838152602092508683858801011115620000f257600080fd5b600091505b8382101562000117578282870101518383830101528282019150620000f7565b60008385830101528094505050505092915050565b600080604083850312156200014057600080fd5b825160018060401b03808211156200015757600080fd5b620001658683870162000079565b935060208501519150808211156200017c57600080fd5b506200018b8582860162000079565b9150509250929050565b60008160011c90506001821680620001ae57607f821691505b602082108103620001cf57634e487b7160e01b600052602260045260246000fd5b50919050565b806000525060006020600020905090565b601f8211156200023857600081815260208120601f850160051c8101602086101562000210578190505b601f850160051c820191505b8181101562000234578281556001810190506200021c565b5050505b505050565b60008260011b6000198460031b1c19831617905092915050565b815160018060401b0381111562000273576200027262000063565b5b6200028b8162000284845462000195565b84620001e6565b60006020809150601f831160018114620002c45760008415620002af578387015190505b620002bb85826200023d565b86555062000328565b601f198416620002d486620001d5565b60005b82811015620002fc5785890151825560018201915084860195508481019050620002d7565b50858210156200031c578488015160001960f88860031b161c1981168255505b505060018460011b0185555b505050505050565b610f8080620003406000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610206578063a9059cbb14610236578063dd62ed3e14610266576100c9565b8063395093511461018857806370a08231146101b857806395d89b41146101e8576100c9565b806318160ddd116100b257806318160ddd1461011c57806323b872dd1461013a578063313ce5671461016a576100c9565b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610296565b6040516100e39190610aa5565b60405180910390f35b61010660048036038101906101019190610b23565b610328565b6040516101139190610b4f565b60405180910390f35b61012461034b565b6040516101319190610b62565b60405180910390f35b610154600480360381019061014f9190610b73565b610355565b6040516101619190610b4f565b60405180910390f35b610172610384565b60405161017f9190610baf565b60405180910390f35b6101a2600480360381019061019d9190610b23565b61038d565b6040516101af9190610b4f565b60405180910390f35b6101d260048036038101906101cd9190610bc3565b6103c4565b6040516101df9190610b62565b60405180910390f35b6101f061040c565b6040516101fd9190610aa5565b60405180910390f35b610220600480360381019061021b9190610b23565b61049e565b60405161022d9190610b4f565b60405180910390f35b610250600480360381019061024b9190610b23565b610515565b60405161025d9190610b4f565b60405180910390f35b610280600480360381019061027b9190610be6565b610538565b60405161028d9190610b62565b60405180910390f35b6060600380546102a590610c19565b80601f01602080910402602001604051908101604052809291908181526020018280546102d190610c19565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b5050505050905090565b6000806103336105bf565b90506103408185856105c7565b600191505092915050565b6000600254905090565b6000806103606105bf565b905061036d858285610790565b61037885858561081c565b60019150509392505050565b60006012905090565b6000806103986105bf565b90506103b98185856103aa8589610538565b6103b49190610c70565b6105c7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461041b90610c19565b80601f016020809104026020016040519081016040528092919081815260200182805461044790610c19565b80156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b5050505050905090565b6000806104a96105bf565b905060006104b78286610538565b9050838110156104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f390610cb4565b60405180910390fd5b61050982868684036105c7565b60019250505092915050565b6000806105206105bf565b905061052d81858561081c565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90610d18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c90610d7c565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107839190610b62565b60405180910390a3505050565b600061079c8484610538565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108165781811015610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90610de0565b60405180910390fd5b61081584848484036105c7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290610e1e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f190610e82565b60405180910390fd5b610905838383610a9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098290610ee6565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a1e9190610c70565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a829190610b62565b60405180910390a3610a95848484610aa0565b50505050565b505050565b505050565b600060208083528351808285015260005b81811015610ad557828187010151604082870101528281019050610ab6565b506000604082860101526040601f19601f8301168501019250505092915050565b60008135905073ffffffffffffffffffffffffffffffffffffffff81168114610b1e57600080fd5b919050565b60008060408385031215610b3657600080fd5b610b3f83610af6565b9150602083013590509250929050565b6000602082019050821515825292915050565b600060208201905082825292915050565b600080600060608486031215610b8857600080fd5b610b9184610af6565b9250610b9f60208501610af6565b9150604084013590509250925092565b600060208201905060ff8316825292915050565b600060208284031215610bd557600080fd5b610bde82610af6565b905092915050565b60008060408385031215610bf957600080fd5b610c0283610af6565b9150610c1060208401610af6565b90509250929050565b60008160011c90506001821680610c3157607f821691505b602082108103610c6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000828201905080821115610cae577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b60208152602560208201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f00000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602460208201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f726573730000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602260208201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f737300000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601d60208201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060408201526000606082019050919050565b60208152602560208201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f647265737300000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602360208201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f657373000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602660208201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e636500000000000000000000000000000000000000000000000000006060820152600060808201905091905056fea2646970667358221220c66f8c70d8979416cf18bb2dd110881c69b9541749b290a9d583cadeb548c1f464736f6c63430008100033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
