/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../contracts/test/TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200197c3803806200197c8339818101604052810190620000379190620003f3565b828281600390816200004a919062000539565b5080600490816200005c919062000539565b505050620000937fc52b15c188c869a994b1a9175f64f5824d6024e309200467e13d6571e1c3ad2a60001b620001a560201b60201c565b620000c77f183a1e9793a9222c5ec848023408f6c54d8b70d94cb7f12160175cf6e592305460001b620001a560201b60201c565b620000fb7fc93d6f435ad13b7526174d9d6f23ccbe7a7d408f4c0b15d6c1d6349a31abad6c60001b620001a560201b60201c565b80600560006101000a81548160ff021916908360ff1602179055506200014a7f1cdb3e7acdac1846688f3f43b1e40cd374476f5b258c0b30da486ff5696a595960001b620001a560201b60201c565b6200017e7f289b61e81c03bec58d8a3f36cb5aed91ac99bb94a65508138db3858dfcbd5ac460001b620001a560201b60201c565b6200019c336b033b2e3c9fd0803ce8000000620001a860201b60201c565b5050506200068d565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200021a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002119062000612565b60405180910390fd5b6200022e600083836200032060201b60201c565b806002600082825462000242919062000650565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000299919062000650565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200030091906200067c565b60405180910390a36200031c600083836200032560201b60201c565b5050565b505050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200035257600080fd5b815160018060401b03808211156200036f576200036e6200032a565b5b601f1960405181603f83601f87011601168101915080821083831117156200039c576200039b6200032a565b5b81604052838152602092508683858801011115620003b957600080fd5b600091505b83821015620003de578282870101518383830101528282019150620003be565b60008385830101528094505050505092915050565b6000806000606084860312156200040957600080fd5b835160018060401b03808211156200042057600080fd5b6200042e8783880162000340565b945060208601519150808211156200044557600080fd5b50620004548682870162000340565b925050604084015160ff811681146200046c57600080fd5b809150509250925092565b60008160011c905060018216806200049057607f821691505b602082108103620004b157634e487b7160e01b600052602260045260246000fd5b50919050565b806000525060006020600020905090565b601f8211156200051a57600081815260208120601f850160051c81016020861015620004f2578190505b601f850160051c820191505b818110156200051657828155600181019050620004fe565b5050505b505050565b60008260011b6000198460031b1c19831617905092915050565b815160018060401b038111156200055557620005546200032a565b5b6200056d8162000566845462000477565b84620004c8565b60006020809150601f831160018114620005a6576000841562000591578387015190505b6200059d85826200051f565b8655506200060a565b601f198416620005b686620004b7565b60005b82811015620005de5785890151825560018201915084860195508481019050620005b9565b5085821015620005fe578488015160001960f88860031b161c1981168255505b505060018460011b0185555b505050505050565b60208152601f60208201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060408201526000606082019050919050565b60008282019050808211156200067657634e487b7160e01b600052601160045260246000fd5b92915050565b600060208201905082825292915050565b6112df806200069d6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806340c10f1911610081578063a457c2d71161005b578063a457c2d714610241578063a9059cbb14610271578063dd62ed3e146102a1576100d4565b806340c10f19146101c357806370a08231146101f357806395d89b4114610223576100d4565b806323b872dd116100b257806323b872dd14610145578063313ce567146101755780633950935114610193576100d4565b806306fdde03146100d9578063095ea7b3146100f757806318160ddd14610127575b600080fd5b6100e16102d1565b6040516100ee9190610dc6565b60405180910390f35b610111600480360381019061010c9190610e44565b610363565b60405161011e9190610e70565b60405180910390f35b61012f610386565b60405161013c9190610e83565b60405180910390f35b61015f600480360381019061015a9190610e94565b610390565b60405161016c9190610e70565b60405180910390f35b61017d6103bf565b60405161018a9190610ed0565b60405180910390f35b6101ad60048036038101906101a89190610e44565b61045a565b6040516101ba9190610e70565b60405180910390f35b6101dd60048036038101906101d89190610e44565b610491565b6040516101ea9190610e70565b60405180910390f35b61020d60048036038101906102089190610ee4565b610583565b60405161021a9190610e83565b60405180910390f35b61022b6105cb565b6040516102389190610dc6565b60405180910390f35b61025b60048036038101906102569190610e44565b61065d565b6040516102689190610e70565b60405180910390f35b61028b60048036038101906102869190610e44565b6106d4565b6040516102989190610e70565b60405180910390f35b6102bb60048036038101906102b69190610f07565b6106f7565b6040516102c89190610e83565b60405180910390f35b6060600380546102e090610f3a565b80601f016020809104026020016040519081016040528092919081815260200182805461030c90610f3a565b80156103595780601f1061032e57610100808354040283529160200191610359565b820191906000526020600020905b81548152906001019060200180831161033c57829003601f168201915b5050505050905090565b60008061036e61077e565b905061037b818585610786565b600191505092915050565b6000600254905090565b60008061039b61077e565b90506103a885828561094f565b6103b38585856109db565b60019150509392505050565b60006103ed7f2b2fa4535c361143407e5e1bb93df550b30052574d0cd812df3777a209d44f1e60001b610c5a565b6104197f60559f6ef2b489186c5ec82fa32001bd9b6845b9b89ef3058e9c6d4c76433c9060001b610c5a565b6104457f80a0ad60eb841db80bdbc90bca3a121cc898a19ab31952a87a9510ff77d8d7df60001b610c5a565b600560009054906101000a900460ff16905090565b60008061046561077e565b905061048681858561047785896106f7565b6104819190610f91565b610786565b600191505092915050565b60006104bf7feef2647445875bb10edd861989fccda167440877b1e1a77e36a866cc7930deea60001b610c5a565b6104eb7f74b81dd689e0c0e236dd20a7d6e9005ef1d5a7455c124bf80a5164251481d95260001b610c5a565b6105177fa7bb30f3eeaf8f1db29935736302727d663f6c08e28a90cba21e6617a191f18560001b610c5a565b6105218383610c5d565b61054d7fb034d99eb1513a14f6655f37569c3887295f0df5d8e9e9e76d7d3155dc8903c160001b610c5a565b6105797fe098af7fb1a313d6d7702e6a2b8533733ef9e928fcb982573a8187bcb322faa860001b610c5a565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105da90610f3a565b80601f016020809104026020016040519081016040528092919081815260200182805461060690610f3a565b80156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b5050505050905090565b60008061066861077e565b9050600061067682866106f7565b9050838110156106bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b290610fd5565b60405180910390fd5b6106c88286868403610786565b60019250505092915050565b6000806106df61077e565b90506106ec8185856109db565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90611039565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085b9061109d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109429190610e83565b60405180910390a3505050565b600061095b84846106f7565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109d557818110156109c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109be90611101565b60405180910390fd5b6109d48484848403610786565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a419061113f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab0906111a3565b60405180910390fd5b610ac4838383610dbc565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4190611207565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bdd9190610f91565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c419190610e83565b60405180910390a3610c54848484610dc1565b50505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ccc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc39061126b565b60405180910390fd5b610cd860008383610dbc565b8060026000828254610cea9190610f91565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d3f9190610f91565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610da49190610e83565b60405180910390a3610db860008383610dc1565b5050565b505050565b505050565b600060208083528351808285015260005b81811015610df657828187010151604082870101528281019050610dd7565b506000604082860101526040601f19601f8301168501019250505092915050565b60008135905073ffffffffffffffffffffffffffffffffffffffff81168114610e3f57600080fd5b919050565b60008060408385031215610e5757600080fd5b610e6083610e17565b9150602083013590509250929050565b6000602082019050821515825292915050565b600060208201905082825292915050565b600080600060608486031215610ea957600080fd5b610eb284610e17565b9250610ec060208501610e17565b9150604084013590509250925092565b600060208201905060ff8316825292915050565b600060208284031215610ef657600080fd5b610eff82610e17565b905092915050565b60008060408385031215610f1a57600080fd5b610f2383610e17565b9150610f3160208401610e17565b90509250929050565b60008160011c90506001821680610f5257607f821691505b602082108103610f8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000828201905080821115610fcf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b60208152602560208201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f00000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602460208201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f726573730000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602260208201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f737300000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601d60208201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060408201526000606082019050919050565b60208152602560208201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f647265737300000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602360208201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f657373000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602660208201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e6365000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601f60208201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006040820152600060608201905091905056fea2646970667358221220bb0685d9717fc7b5e91a29cf3e0bf4ea7fe49b0a8144bafb3be7cf561b9a2d2664736f6c63430008100033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(
      name_,
      symbol_,
      _decimals,
      overrides || {}
    ) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      _decimals,
      overrides || {}
    );
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
