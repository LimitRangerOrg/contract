/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC721,
  TestERC721Interface,
} from "../../../contracts/test/TestERC721";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620023c2380380620023c2833981810160405281019062000037919062000167565b818181600090816200004a919062000292565b5080600190816200005c919062000292565b505050620000937f5f6a8fa9745c5e9920a9826720a659cf2a3550c89c6f26e7cf9bcf8610a9a0eb60001b6200009b60201b60201c565b50506200036b565b50565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000c657600080fd5b815160018060401b0380821115620000e357620000e26200009e565b5b601f1960405181603f83601f870116011681019150808210838311171562000110576200010f6200009e565b5b816040528381526020925086838588010111156200012d57600080fd5b600091505b838210156200015257828287010151838383010152828201915062000132565b60008385830101528094505050505092915050565b600080604083850312156200017b57600080fd5b825160018060401b03808211156200019257600080fd5b620001a086838701620000b4565b93506020850151915080821115620001b757600080fd5b50620001c685828601620000b4565b9150509250929050565b60008160011c90506001821680620001e957607f821691505b6020821081036200020a57634e487b7160e01b600052602260045260246000fd5b50919050565b806000525060006020600020905090565b601f8211156200027357600081815260208120601f850160051c810160208610156200024b578190505b601f850160051c820191505b818110156200026f5782815560018101905062000257565b5050505b505050565b60008260011b6000198460031b1c19831617905092915050565b815160018060401b03811115620002ae57620002ad6200009e565b5b620002c681620002bf8454620001d0565b8462000221565b60006020809150601f831160018114620002ff5760008415620002ea578387015190505b620002f6858262000278565b86555062000363565b601f1984166200030f8662000210565b60005b8281101562000337578589015182556001820191508486019550848101905062000312565b508582101562000357578488015160001960f88860031b161c1981168255505b505060018460011b0185555b505050505050565b612047806200037b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb4651461026f578063b88d4fde1461028b578063c87b56dd146102a7578063e985e9c5146102d7576100ea565b80636352211e146101f157806370a082311461022157806395d89b4114610251576100ea565b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018957806340c10f19146101a557806342842e0e146101d5576100ea565b806301ffc9a7146100ef57806306fdde031461011f578063081812fc1461013d575b600080fd5b6101096004803603810190610104919061170e565b610307565b6040516101169190611735565b60405180910390f35b6101276103e9565b60405161013491906117a0565b60405180910390f35b610157600480360381019061015291906117bb565b61047b565b60405161016491906117d7565b60405180910390f35b6101876004803603810190610182919061182b565b6104c1565b005b6101a3600480360381019061019e9190611857565b6105d8565b005b6101bf60048036038101906101ba919061182b565b610638565b6040516101cc9190611735565b60405180910390f35b6101ef60048036038101906101ea9190611857565b61072a565b005b61020b600480360381019061020691906117bb565b61074a565b60405161021891906117d7565b60405180910390f35b61023b60048036038101906102369190611893565b6107fb565b60405161024891906118b6565b60405180910390f35b6102596108b2565b60405161026691906117a0565b60405180910390f35b610289600480360381019061028491906118c7565b610944565b005b6102a560048036038101906102a09190611932565b61095a565b005b6102c160048036038101906102bc91906117bb565b6109bc565b6040516102ce91906117a0565b60405180910390f35b6102f160048036038101906102ec9190611a11565b610a24565b6040516102fe9190611735565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103e257506103e182610ab8565b5b9050919050565b6060600080546103f890611a44565b80601f016020809104026020016040519081016040528092919081815260200182805461042490611a44565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b5050505050905090565b600061048682610b22565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104cc8261074a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390611a9b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661055b610b6d565b73ffffffffffffffffffffffffffffffffffffffff16148061058a575061058981610584610b6d565b610a24565b5b6105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c090611aff565b60405180910390fd5b6105d38383610b75565b505050565b6105e96105e3610b6d565b82610c2e565b610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061f90611b63565b60405180910390fd5b610633838383610cc3565b505050565b60006106667f317fc429237fc5ff6c80da6a505c61eefbcc56c188c37a3a85bde245f6722e5d60001b610f29565b6106927f0b33528ae1e840a62217ba1ca39f2194f178550f587be8a72ebc05688e8ec10960001b610f29565b6106be7ff38b6b5e9bcd311e7d9945569c8ebfc32920c4794bf0a9b5a75dfd0fca11928160001b610f29565b6106c88383610f2c565b6106f47fb307c271c57b3f568d01f24cd1a25768c505c9f71e4dd28d26b48dcfb8e0517360001b610f29565b6107207fa3decccf310b8e48ac1322d3663632ab3e6824332d1cdfca3c581db9e92426ed60001b610f29565b6001905092915050565b6107458383836040518060200160405280600081525061095a565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e990611bc7565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086290611c05565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546108c190611a44565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed90611a44565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050905090565b61095661094f610b6d565b8383610f4a565b5050565b61096b610965610b6d565b83610c2e565b6109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a190611b63565b60405180910390fd5b6109b6848484846110b6565b50505050565b60606109c782610b22565b60006109d1611112565b905060008151116109f15760405180602001604052806000815250610a1c565b806109fb84611129565b604051602001610a0c929190611c69565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610b2b81611289565b610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190611bc7565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610be88361074a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c3a8361074a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c7c5750610c7b8185610a24565b5b80610cba57508373ffffffffffffffffffffffffffffffffffffffff16610ca28461047b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610ce38261074a565b73ffffffffffffffffffffffffffffffffffffffff1614610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090611c9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f90611d02565b60405180910390fd5b610db38383836112f5565b610dbe600082610b75565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e0e9190611d95565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e659190611db3565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f248383836112fa565b505050565b50565b610f468282604051806020016040528060008152506112ff565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faf90611dd1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110a99190611735565b60405180910390a3505050565b6110c1848484610cc3565b6110cd8484848461135a565b61110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390611e0f565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008203611170576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611284565b600082905060005b600082146111a257808061118b90611e73565b915050600a8261119b9190611ec0565b9150611178565b60008167ffffffffffffffff8111156111be576111bd611903565b5b6040519080825280601f01601f1916602001820160405280156111f05781602001600182028036833780820191505090505b5090505b6000851461127d576001826112099190611d95565b9150600a856112189190611edb565b60306112249190611db3565b60f81b81838151811061123a57611239611ef6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856112769190611ec0565b94506111f4565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b61130983836114e1565b611316600084848461135a565b611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134c90611e0f565b60405180910390fd5b505050565b600061137b8473ffffffffffffffffffffffffffffffffffffffff166116ba565b156114d4578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026113a4610b6d565b8786866040518563ffffffff1660e01b81526004016113c69493929190611f25565b6020604051808303816000875af192505050801561140257506040513d601f19601f820116820180604052508101906113ff9190611f6f565b60015b611484573d8060008114611432576040519150601f19603f3d011682016040523d82523d6000602084013e611437565b606091505b50600081510361147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147390611e0f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506114d9565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154790611f96565b60405180910390fd5b61155981611289565b15611599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159090611fd3565b60405180910390fd5b6115a5600083836112f5565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115f59190611db3565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116b6600083836112fa565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461170b57600080fd5b50565b60006020828403121561172057600080fd5b813561172b816116dd565b8091505092915050565b6000602082019050821515825292915050565b60005b8381101561176657808201518184015260208101905061174b565b50600083830152505050565b6000815180845261178a816020860160208601611748565b6020601f19601f83011685010191505092915050565b6020815260006117b36020830184611772565b905092915050565b6000602082840312156117cd57600080fd5b8135905092915050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff8316825292915050565b60008135905073ffffffffffffffffffffffffffffffffffffffff8116811461182657600080fd5b919050565b6000806040838503121561183e57600080fd5b611847836117fe565b9150602083013590509250929050565b60008060006060848603121561186c57600080fd5b611875846117fe565b9250611883602085016117fe565b9150604084013590509250925092565b6000602082840312156118a557600080fd5b6118ae826117fe565b905092915050565b600060208201905082825292915050565b600080604083850312156118da57600080fd5b6118e3836117fe565b9150602083013580151581146118f857600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561194857600080fd5b611951856117fe565b935061195f602086016117fe565b925060408501359150606085013567ffffffffffffffff8082111561198357600080fd5b818701915087601f83011261199757600080fd5b8135818111156119aa576119a9611903565b5b601f1960405181603f83601f86011601168101915080821084831117156119d4576119d3611903565b5b816040528281528a60208487010111156119ed57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611a2457600080fd5b611a2d836117fe565b9150611a3b602084016117fe565b90509250929050565b60008160011c90506001821680611a5c57607f821691505b602082108103611a95577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60208152602160208201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560408201527f720000000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152603e60208201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60408201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060608201526000608082019050919050565b60208152602e60208201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201527f72206e6f7220617070726f76656400000000000000000000000000000000000060608201526000608082019050919050565b60208152601860208201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060408201526000606082019050919050565b60208152602960208201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160408201527f6c6964206f776e6572000000000000000000000000000000000000000000000060608201526000608082019050919050565b60008351611c7b818460208801611748565b80830190508351611c90818360208801611748565b808201925050509392505050565b60208152602560208201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201527f6f776e657200000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602460208201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460408201527f726573730000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828203905081811115611dad57611dac611d66565b5b92915050565b6000828201905080821115611dcb57611dca611d66565b5b92915050565b60208152601960208201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060408201526000606082019050919050565b60208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e746572000000000000000000000000000060608201526000608082019050919050565b600080198203611e8657611e85611d66565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611ed057611ecf611e91565b5b828204905092915050565b600082611eeb57611eea611e91565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152611f646080830184611772565b905095945050505050565b600060208284031215611f8157600080fd5b8151611f8c816116dd565b8091505092915050565b602081526020808201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360408201526000606082019050919050565b60208152601c60208201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006040820152600060608201905091905056fea26469706673582212201cf0675a6bfa234481200f671d5f5daae25323d6759936db0c8f752c7085c92f64736f6c63430008100033";

type TestERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC721__factory extends ContractFactory {
  constructor(...args: TestERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC721> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<TestERC721>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): TestERC721 {
    return super.attach(address) as TestERC721;
  }
  override connect(signer: Signer): TestERC721__factory {
    return super.connect(signer) as TestERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC721Interface {
    return new utils.Interface(_abi) as TestERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC721 {
    return new Contract(address, _abi, signerOrProvider) as TestERC721;
  }
}
