/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestWETH9,
  TestWETH9Interface,
} from "../../../contracts/test/TestWETH9";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "guy",
        type: "address",
      },
      {
        name: "wad",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "src",
        type: "address",
      },
      {
        name: "dst",
        type: "address",
      },
      {
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "wad",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "dst",
        type: "address",
      },
      {
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "deposit",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address",
      },
      {
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        name: "guy",
        type: "address",
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "src",
        type: "address",
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
];

const _bytecode =
  "0x60606040526040805190810160405280600d81526020017f57726170706564204574686572000000000000000000000000000000000000008152506000908051906020019062000051929190620000ce565b506040805190810160405280600481526020017f5745544800000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620000ce565b506012600260006101000a81548160ff021916908360ff1602179055503415620000c857600080fd5b6200017d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011157805160ff191683800117855562000142565b8280016001018555821562000142579182015b828111156200014157825182559160200191906001019062000124565b5b50905062000151919062000155565b5090565b6200017a91905b80821115620001765760008160009055506001016200015c565b5090565b90565b6115b0806200018d6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461013d578063095ea7b3146101cb57806318160ddd1461022557806323b872dd1461024e5780632e1a7d4d146102c7578063313ce567146102ea57806370a082311461031957806395d89b4114610366578063a9059cbb146103f4578063d0e30db01461044e578063dd62ed3e14610458575b6100db7fa0e27a306cc73c899634152ca6b0fb80690127bcc4d6665a760bbbc8b0481b9f6001026104c4565b6101077f47ae3b1cebc7dcb8fb271c52bd9102a97bf1a44b60bbfea61d6cc6d9f379b2766001026104c4565b6101337fc6a89444980612289c639b3d15bd4e72ac0bd4ac25febcf48634dc800162cca16001026104c4565b61013b6104c7565b005b341561014857600080fd5b610150610640565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610190578082015181840152602081019050610175565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d657600080fd5b61020b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106de565b604051808215151515815260200191505060405180910390f35b341561023057600080fd5b610238610904565b6040518082815260200191505060405180910390f35b341561025957600080fd5b6102ad600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109a7565b604051808215151515815260200191505060405180910390f35b34156102d257600080fd5b6102e860048080359060200190919050506110ed565b005b34156102f557600080fd5b6102fd6113fd565b604051808260ff1660ff16815260200191505060405180910390f35b341561032457600080fd5b610350600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611410565b6040518082815260200191505060405180910390f35b341561037157600080fd5b610379611428565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b957808201518184015260208101905061039e565b50505050905090810190601f1680156103e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ff57600080fd5b610434600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114c6565b604051808215151515815260200191505060405180910390f35b6104566104c7565b005b341561046357600080fd5b6104ae600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061155f565b6040518082815260200191505060405180910390f35b50565b6104f37fb48705d7a93fdae4899f7b95b1f82d4a31f8faa317b53e629dc8d4c73dc555d86001026104c4565b61051f7f418b5c2475d30a4d793018c6da83aaafe5f93418c79f0540ba62df9538533e8a6001026104c4565b61054b7f5f748bfec118440e18963a3551a85b468394b28227137af8dc9ccde4c08b41f06001026104c4565b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506105c47f24b1d20f125689428686488860d26e93077697637aca8c7aeff82f4a6e7dfda26001026104c4565b6105f07f1d9c58963a2fc78bcc8dca27d382bcb060f7a9ea852cc957d3a992e9dfcd4d666001026104c4565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d65780601f106106ab576101008083540402835291602001916106d6565b820191906000526020600020905b8154815290600101906020018083116106b957829003601f168201915b505050505081565b600061070c7ff949add15b8afa27b50e80ef8f59d0bd20308d5fd313030d385d8b34e2e0bbed6001026104c4565b6107387f6acbe20353d63880f81a1fd62ccf6cad741a7620e0d33f0062bcee8b86f3619e6001026104c4565b6107647fae532d6695d6f2ee74cc444657cbf8c1b68d551c8261645c47819100bd0ad3066001026104c4565b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108117f01388327e9e2c494bf8539ce44f1178717c747fa7c3218052cf14e195b1cf98c6001026104c4565b61083d7fc19659bab511f98b811fff9603d605dc8db73a163abe7543ffde437d8f8c25bd6001026104c4565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36108ce7fcf81525a98aae8bc50be3db8c21b7b20e9e5f8f7f94398cbf0825ad5cb9f60866001026104c4565b6108fa7f4b2075ba45ce9205b4d0ad57d70128af17eee457a540f6a3fe990a56143ec90c6001026104c4565b6001905092915050565b60006109327ff7b31e1c40343e217e384dbcbf008c1929dafc12f8cd5805df347db3772c836a6001026104c4565b61095e7f31d2efe09eaee3a3d5b2409f72ad301134ce641f8110d7b6e60aa3573f662bdf6001026104c4565b61098a7f78763e62ea55bf1f753d86e30a3f08504e69f3aab0e71ec3788a3089da6db8416001026104c4565b3073ffffffffffffffffffffffffffffffffffffffff1631905090565b60006109d57fd9f81cb239fc2274771a59d35e553ec77915473f68940b4cf78d7a69dc7488696001026104c4565b610a017fb6a7a5c6da4166a9fd10306c3a34d3301c6c48a54f8d35e95a49ee72bac4f1406001026104c4565b610a2d7fc04bdbba82b62057d9852800c1ea501153b9b25ba421fc06ff355011db61e6456001026104c4565b610a597f16a98ff9be7114a566057f27a6490844ac2c23bc5d8bfa998b5f1268517167e06001026104c4565b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610aa757600080fd5b610ad37f8896046a047fac3abecab4482dd73628819146c7a4a787ff60c48e28edfbb3f06001026104c4565b610aff7fb4ed41b55bc2f1120fde6bd23c4e0381467164da99ea7c7b4a746ae002d2fd076001026104c4565b610b2b7fb33ca1d75566720657d8b9109ea0272cdb096e3d8ba750649b34117b139ca6226001026104c4565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610c0357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610e5657610c347f296a82c0dc998b8962c2e1fd036a5157c279b72f0cb19e006035b73783c910d06001026104c4565b610c607fd4d46c65249808ceb2b6e5f17470a212a032fb65921f0af495baec3ee4e901646001026104c4565b610c8c7f63bce7f69e5813cda2c1d190cd7f64ee0dc730af8cd3044088659e136204ced86001026104c4565b610cb87f1648b410219ecdb7bc0d164803f1b51d8a627c97be120f5accaa4ab1b396db486001026104c4565b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d4357600080fd5b610d6f7f37a241bab032679e89af6bc5154b53458915adebfad8faf193c0275563a6610a6001026104c4565b610d9b7f46852c8bc70705b78b8ef80d32c7c3837efb0bea4c6f9e5dafa56946c25a34e76001026104c4565b610dc77ff835c2866fb6312611fc4415417dfe25c231df7430cce2936d61b3813d14faf56001026104c4565b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610e83565b610e827f2c8a336cc0777b4321d7802d7ab25597d61bde3e13742a6c4457308821c63cd46001026104c4565b5b610eaf7f96a650d206656e49ef8769979c0cc89643c809b388ef2a75958fef7bd93af5c56001026104c4565b610edb7f024960dd1fb7a7fae24f1cb9e1bef1b96787610620730fe7e1978b7300b44f6a6001026104c4565b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610f547f310f8b21316ecd2e372215469c172d3d61382c0c0c2c244d943a9df3ba42dde96001026104c4565b610f807f3b8f15dc2348d5cee3314599eb44d84e8e0fe675792e2e17889ef6adf29e77fb6001026104c4565b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610ff97fd6fe7a6ac47caa7d6f0b585ea7143f1416352e8111a62e6ee5655e5ef2c81a4a6001026104c4565b6110257fd66df34a684fbda35cfd4cc26d3fab58ae42eb45f33215da8ad5be0badc6484d6001026104c4565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36110b67f51f610d4ff2eabca5ad56b59a1925f7a6a7811eb79271d7ed69cb150af6b4b8b6001026104c4565b6110e27f86604c91505a986b630daf89c820fed4ca87e80eabff6fa5adc6570e7ac6c4256001026104c4565b600190509392505050565b6111197fb66ee67248f8f647269309e1004261a2eb7b5bb5ce3e3b45f15674c30bc1cb2b6001026104c4565b6111457f36f3e27e2dddf9e6843b187704bca6b8ccff92559f6cf1acf9d6a78425b7efe06001026104c4565b6111717f286a324e456fae0550957076a29953563bc4e6606006579a654b51c220f53d046001026104c4565b61119d7f55471ea49a3143b9ba1b87e807a9a4d3010411e1de943141fb5a8c4092cec3e56001026104c4565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111eb57600080fd5b6112177f2d7c98caf6b37fe690639ea8635e57acf162737b4dad60cf0d8d67f92ecb12b66001026104c4565b6112437f36b3d8d7675b0ac8ff7cc6a3f8138e75150c8a8adda5cc36e6a927b97a2a519b6001026104c4565b61126f7f66ffb28b5b7a8caf3aa2b39d08946e89c4d2014ee836dd8610b67498be200b316001026104c4565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506112e87fc5f12ca4d83ee22c3d17d69fb59868b2609d8ec0c494cf151403944165f293ee6001026104c4565b6113147f3d06b76508dea9a740cfff569d7ae9494c1c931191603bb6cff1f8dce982684a6001026104c4565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561135457600080fd5b6113807ff4b23cc1ff1960725873c7660423c86b94950bcddee323620d584f81e0f31c366001026104c4565b6113ac7f295a9af1153dbbe8c94a71cde690fa626865614c5e4a4b4889ee72728b75898f6001026104c4565b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114be5780601f10611493576101008083540402835291602001916114be565b820191906000526020600020905b8154815290600101906020018083116114a157829003601f168201915b505050505081565b60006114f47f0ce94821b67e9b57d5211cbf06f519b6c2c42926baac4779d42dedc36beebb316001026104c4565b6115207f146dea25179dedf5172876b6f542981757a0e05a8111151ff185a304048ae5326001026104c4565b61154c7fbdab49c816ae8eccefe749239afeee892f4ddd51bee80ec56192d2825b5931c76001026104c4565b6115573384846109a7565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820dc9c8ad89d37c1ae8e56bb50224897e2c2b289898118d41a300270d2317180950029";

type TestWETH9ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWETH9ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWETH9__factory extends ContractFactory {
  constructor(...args: TestWETH9ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWETH9> {
    return super.deploy(overrides || {}) as Promise<TestWETH9>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestWETH9 {
    return super.attach(address) as TestWETH9;
  }
  override connect(signer: Signer): TestWETH9__factory {
    return super.connect(signer) as TestWETH9__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWETH9Interface {
    return new utils.Interface(_abi) as TestWETH9Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWETH9 {
    return new Contract(address, _abi, signerOrProvider) as TestWETH9;
  }
}
